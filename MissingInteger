This is a demo task.

Write a function:

class Solution { public int solution(int[] A); }

that, given an array A of N integers, returns the smallest positive integer (greater than 0) that does not occur in A.

For example, given A = [1, 3, 6, 4, 1, 2], the function should return 5.

Given A = [1, 2, 3], the function should return 4.

Given A = [−1, −3], the function should return 1.

Write an efficient algorithm for the following assumptions:

N is an integer within the range [1..100,000];


import java.util.Arrays;
import java.util.HashSet;
import java.util.Scanner;
import java.util.Set;

public class missingInteger {
public static void main(String[] args) {
	System.out.println(solution(new Integer[] { 3, 1, 2, 4, 5, 7}));
}

private static int solution(Integer[] input) {
	// TODO Auto-generated method stub
	Arrays.sort(input);
	int result = input[input.length-1]+1;
for (int i = 0; i < input.length-1; i++) {
	if(input[i]>0 && input[i+1] - input[i]>1) {
		result = input[i]+1;
	}
	}
return result;
}
}
